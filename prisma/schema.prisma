datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Model for storing user data
model User {
  id        String @id @default(uuid())
  email     String @unique
  firstName String @default("")
  lastName  String @default("")

  auth        Auth?
  mailingList MailingList?
  permissions UserPermission?

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  LoginAttempt LoginAttempt[]
}

model Auth {
  id           String @id @default(uuid())
  passwordHash String @db.VarChar(255)

  emailVerified Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId String @unique

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model MailingList {
  id String @id @default(uuid())

  // Link to User
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId String @unique

  // Enrolled Options
  preRegistered Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HiringApplication {
  id String @id @default(uuid())

  firstName String
  lastName  String
  email     String

  dateOfBirth DateTime
  institution String

  resumePath    String
  resumeName    String
  portfolioPath String?
  portfolioName String?

  aboutAnswer  String
  recordAnswer String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model UserPermission {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId String @unique

  // Permissions

  // Basic
  canAccessDashboard Boolean @default(true)

  // Admin
  canAccessAdmin              Boolean @default(false)
  canManageUsers              Boolean @default(false)
  canManageMailingList        Boolean @default(false)
  canManageHiringApplications Boolean @default(false)
  isSuperAdmin                Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoginAttempt {
  id String @id @default(uuid())

  email String
  ip    String

  result LoginResult

  associatedUserId String? // If the user is found, we can associate the user with the attempt
  associatedUser   User?   @relation(fields: [associatedUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LoginResult {
  SUCCESS
  INVALID_PASSWORD
  USER_NOT_FOUND
  TOO_MANY_ATTEMPTS
}
